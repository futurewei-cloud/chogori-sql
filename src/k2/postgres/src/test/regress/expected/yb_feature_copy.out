--
-- YB_FEATURE Testsuite: COPY
--
CREATE TABLE x (
	a int,
	b int,
	c text,
	d text,
	e text
);
COPY x (a, b, c, d, e) from stdin;
COPY x (b, d) from stdin;
COPY x (b, d) from stdin;
COPY x (a, b, c, d, e) from stdin;
-- non-existent column in column list: should fail
COPY x (xyz) from stdin;
ERROR:  column "xyz" of relation "x" does not exist
-- too many columns in column list: should fail
COPY x (a, b, c, d, e, d, c) from stdin;
ERROR:  column "d" specified more than once
-- missing data: should fail
COPY x from stdin;
ERROR:  invalid input syntax for integer: ""
CONTEXT:  COPY x, line 1, column a: ""
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2000	230	23	23"
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2001	231	\N	\N"
-- extra data: should fail
COPY x from stdin;
ERROR:  extra data after last expected column
CONTEXT:  COPY x, line 1: "2002	232	40	50	60	70	80"
-- various COPY options: delimiters, NULL string, encoding
COPY x (b, c, d, e) from stdin delimiter ',' null 'x';
COPY x from stdin WITH DELIMITER AS ';' NULL AS '';
COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X' ENCODING 'sql_ascii';
-- check results of copy in
SELECT * FROM x ORDER BY a,b,c,d;
   a   | b  |     c      |   d    | e
-------+----+------------+--------+----
  3000 |    | c          |        |
  4000 |    | C          |        |
  4001 |  1 | empty      |        |
  4002 |  2 | null       |        |
  4003 |  3 | Backslash  | \      | \
  4004 |  4 | BackslashX | \X     | \X
  4005 |  5 | N          | N      | N
  4006 |  6 | BackslashN | \N     | \N
  4007 |  7 | XX         | XX     | XX
  4008 |  8 | Delimiter  | :      | :
  9999 |    | \N         | NN     |
 10000 | 21 | 31         | 41     | 51
 10001 | 22 | 32         | 42     | 52
 10002 | 23 | 33         | 43     | 53
 10003 | 24 | 34         | 44     | 54
 10004 | 25 | 35         | 45     | 55
 10005 | 26 | 36         | 46     | 56
       |  1 |            | test_1 |
       |  2 |            | test_2 |
       |  3 |            | test_3 |
       |  4 |            | test_4 |
       |  5 |            | test_5 |
       |    | ,          | \,     | \
       |    | 45         | 80     | 90
       |    | x          | \x     | \x
(25 rows)

-- check copy out
COPY (SELECT * FROM x ORDER BY a,b,c,d) TO stdout;
3000	\N	c	\N	\N
4000	\N	C	\N	\N
4001	1	empty
4002	2	null	\N	\N
4003	3	Backslash	\\	\\
4004	4	BackslashX	\\X	\\X
4005	5	N	N	N
4006	6	BackslashN	\\N	\\N
4007	7	XX	XX	XX
4008	8	Delimiter	:	:
9999	\N	\\N	NN	\N
10000	21	31	41	51
10001	22	32	42	52
10002	23	33	43	53
10003	24	34	44	54
10004	25	35	45	55
10005	26	36	46	56
\N	1	\N	test_1	\N
\N	2	\N	test_2	\N
\N	3	\N	test_3	\N
\N	4	\N	test_4	\N
\N	5	\N	test_5	\N
\N	\N	,	\\,	\\
\N	\N	45	80	90
\N	\N	x	\\x	\\x
COPY (SELECT c,e FROM x ORDER BY a,b,c,d) TO stdout;
c	\N
C	\N
empty
null	\N
Backslash	\\
BackslashX	\\X
N	N
BackslashN	\\N
XX	XX
Delimiter	:
\\N	\N
31	51
32	52
33	53
34	54
35	55
36	56
\N	\N
\N	\N
\N	\N
\N	\N
\N	\N
,	\\
45	90
x	\\x
COPY (SELECT b,e FROM x ORDER BY a,b,c,d) TO stdout WITH NULL 'I''m null';
I'm null	I'm null
I'm null	I'm null
1
2	I'm null
3	\\
4	\\X
5	N
6	\\N
7	XX
8	:
I'm null	I'm null
21	51
22	52
23	53
24	54
25	55
26	56
1	I'm null
2	I'm null
3	I'm null
4	I'm null
5	I'm null
I'm null	\\
I'm null	90
I'm null	\\x
CREATE TABLE y (
	col1 text,
	col2 text
);
INSERT INTO y VALUES ('Jackson, Sam', E'\\h');
INSERT INTO y VALUES ('It is "perfect".',E'\t');
INSERT INTO y VALUES ('', NULL);
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV;
"",
"It is ""perfect"".",
"Jackson, Sam",\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV QUOTE '''' DELIMITER '|';
''|
It is "perfect".|
Jackson, Sam|\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\' ENCODING 'sql_ascii';
"",
"It is \"perfect\".","	"
"Jackson, Sam","\\h"
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout WITH CSV FORCE QUOTE *;
"",
"It is ""perfect"".","	"
"Jackson, Sam","\h"
-- Repeat above tests with new 9.0 option syntax
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV);
"",
"It is ""perfect"".",
"Jackson, Sam",\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|');
''|
It is "perfect".|
Jackson, Sam|\h
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\');
"",
"It is \"perfect\".","	"
"Jackson, Sam","\\h"
COPY (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE *);
"",
"It is ""perfect"".","	"
"Jackson, Sam","\h"
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV)
"",
"It is ""perfect"".",
"Jackson, Sam",\h
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')
''|
It is "perfect".|
Jackson, Sam|\h
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
"",
"It is \"perfect\".","	"
"Jackson, Sam","\\h"
\copy (SELECT * FROM y ORDER BY col1,col2) TO stdout (FORMAT CSV, FORCE_QUOTE *)
"",
"It is ""perfect"".","	"
"Jackson, Sam","\h"
--test that we read consecutive LFs properly
CREATE TABLE testnl (a int, b text, c int);
COPY testnl FROM stdin CSV;
-- test end of copy marker
CREATE TABLE testeoc (a text);
COPY testeoc FROM stdin CSV;
-- test handling of nonstandard null marker that violates escaping rules
CREATE TABLE testnull (a int, b text);
INSERT INTO testnull VALUES (1, E'\\0'), (NULL, NULL);
COPY (SELECT * FROM testnull ORDER BY a,b) TO stdout WITH NULL AS E'\\0';
1	\\0
\0	\0
COPY testnull FROM stdin WITH NULL AS E'\\0';
SELECT * FROM testnull ORDER BY a,b;
 a  | b
----+----
  1 | \0
 42 | \0
    |
    |
(4 rows)

-- Test FORCE_NOT_NULL and FORCE_NULL options
CREATE TABLE forcetest (
    a INT NOT NULL,
    b TEXT NOT NULL,
    c TEXT,
    d TEXT,
    e TEXT
);
\pset null NULL
-- should succeed with no effect ("b" remains an empty string, "c" remains NULL)
BEGIN;
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b), FORCE_NULL(c));
COMMIT;
SELECT b, c FROM forcetest WHERE a = 1;
 b |  c
---+------
   | NULL
(1 row)

-- should succeed, FORCE_NULL and FORCE_NOT_NULL can be both specified
BEGIN;
COPY forcetest (a, b, c, d) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(c,d), FORCE_NULL(c,d));
COMMIT;
SELECT c, d FROM forcetest WHERE a = 2;
 c |  d
---+------
   | NULL
(1 row)

-- should fail with not-null constraint violation
BEGIN;
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b), FORCE_NOT_NULL(c));
ERROR:  null value in column "b" violates not-null constraint
DETAIL:  Failing row contains (3, null, , null, null).
CONTEXT:  COPY forcetest, line 1: "3,,"""
ROLLBACK;
-- should fail with "not referenced by COPY" error
BEGIN;
COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b));
ERROR:  FORCE_NOT_NULL column "b" not referenced by COPY
ROLLBACK;
-- should fail with "not referenced by COPY" error
BEGIN;
COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b));
ERROR:  FORCE_NULL column "b" not referenced by COPY
ROLLBACK;
CREATE TABLE t(k INT PRIMARY KEY, v INT);
CREATE UNIQUE INDEX ON t(v);
-- should fail, non unique primary key
COPY t FROM stdin;
ERROR:  duplicate key value violates unique constraint "t_pkey"
-- should fail, non unique index
COPY t FROM stdin;
ERROR:  duplicate key value violates unique constraint "t_v_idx"
SELECT COUNT(*) FROM t;
 count
-------
     0
(1 row)

-- clean up
DROP TABLE forcetest;
DROP TABLE x;
DROP TABLE y;
DROP TABLE testnl;
DROP TABLE testeoc;
DROP TABLE testnull;
DROP TABLE t;
