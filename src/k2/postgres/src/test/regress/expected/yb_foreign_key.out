--
-- FOREIGN KEY (YB-added tests)
--
-- TODO: Run this test with REPEATABLE READ isolation level:
--       https://github.com/yugabyte/yugabyte-db/issues/2604
--
-- MATCH FULL
--
-- First test, check and cascade
--
CREATE TABLE ITABLE ( ptest1 int, ptest2 text );
CREATE UNIQUE INDEX ITABLE_IDX ON ITABLE(ptest1);
CREATE TABLE FKTABLE ( ftest1 int REFERENCES ITABLE(ptest1) MATCH FULL ON DELETE CASCADE ON UPDATE CASCADE, ftest2 int );
-- Insert test data into ITABLE
INSERT INTO ITABLE VALUES (1, 'Test1');
INSERT INTO ITABLE VALUES (2, 'Test2');
INSERT INTO ITABLE VALUES (3, 'Test3');
INSERT INTO ITABLE VALUES (4, 'Test4');
INSERT INTO ITABLE VALUES (5, 'Test5');
-- Insert successful rows into FK TABLE
INSERT INTO FKTABLE VALUES (1, 2);
INSERT INTO FKTABLE VALUES (2, 3);
INSERT INTO FKTABLE VALUES (3, 4);
INSERT INTO FKTABLE VALUES (NULL, 1);
-- Insert a failed row into FK TABLE
INSERT INTO FKTABLE VALUES (100, 2);
ERROR:  insert or update on table "fktable" violates foreign key constraint "fktable_ftest1_fkey"
DETAIL:  Key (ftest1)=(100) is not present in table "itable".
-- Check FKTABLE
SELECT * FROM FKTABLE ORDER BY ftest1;
 ftest1 | ftest2
--------+--------
      1 |      2
      2 |      3
      3 |      4
        |      1
(4 rows)

-- Delete a row from ITABLE
DELETE FROM ITABLE WHERE ptest1=1;
-- Check FKTABLE for removal of matched row
SELECT * FROM FKTABLE ORDER BY ftest1;
 ftest1 | ftest2
--------+--------
      2 |      3
      3 |      4
        |      1
(3 rows)

-- Update a row from ITABLE
UPDATE ITABLE SET ptest1=1 WHERE ptest1=2;
-- Check FKTABLE for update of matched row
SELECT * FROM FKTABLE ORDER BY ftest1;
 ftest1 | ftest2
--------+--------
      1 |      3
      3 |      4
        |      1
(3 rows)

DROP TABLE FKTABLE;
DROP TABLE ITABLE;
--
-- check set NULL and table constraint on multiple columns
--
CREATE TABLE ITABLE ( ptest1 int, ptest2 int, ptest3 text);
CREATE UNIQUE INDEX ITABLE_IDX ON ITABLE(ptest1, ptest2);
CREATE TABLE FKTABLE ( ftest1 int, ftest2 int, ftest3 int, CONSTRAINT constrname FOREIGN KEY(ftest1, ftest2)
                       REFERENCES ITABLE(ptest1, ptest2) MATCH FULL ON DELETE SET NULL ON UPDATE SET NULL);
-- Insert test data into ITABLE
INSERT INTO ITABLE VALUES (1, 2, 'Test1');
INSERT INTO ITABLE VALUES (1, 3, 'Test1-2');
INSERT INTO ITABLE VALUES (2, 4, 'Test2');
INSERT INTO ITABLE VALUES (3, 6, 'Test3');
INSERT INTO ITABLE VALUES (4, 8, 'Test4');
INSERT INTO ITABLE VALUES (5, 10, 'Test5');
-- Insert successful rows into FK TABLE
INSERT INTO FKTABLE VALUES (1, 2, 4);
INSERT INTO FKTABLE VALUES (1, 3, 5);
INSERT INTO FKTABLE VALUES (2, 4, 8);
INSERT INTO FKTABLE VALUES (3, 6, 12);
INSERT INTO FKTABLE VALUES (NULL, NULL, 0);
-- Insert failed rows into FK TABLE
INSERT INTO FKTABLE VALUES (100, 2, 4);
ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
DETAIL:  Key (ftest1, ftest2)=(100, 2) is not present in table "itable".
INSERT INTO FKTABLE VALUES (2, 2, 4);
ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
DETAIL:  Key (ftest1, ftest2)=(2, 2) is not present in table "itable".
INSERT INTO FKTABLE VALUES (NULL, 2, 4);
ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
DETAIL:  MATCH FULL does not allow mixing of null and nonnull key values.
INSERT INTO FKTABLE VALUES (1, NULL, 4);
ERROR:  insert or update on table "fktable" violates foreign key constraint "constrname"
DETAIL:  MATCH FULL does not allow mixing of null and nonnull key values.
-- Check FKTABLE
SELECT * FROM FKTABLE ORDER BY ftest1, ftest2, ftest3;
 ftest1 | ftest2 | ftest3
--------+--------+--------
      1 |      2 |      4
      1 |      3 |      5
      2 |      4 |      8
      3 |      6 |     12
        |        |      0
(5 rows)

-- Delete a row from ITABLE
DELETE FROM ITABLE WHERE ptest1=1 and ptest2=2;
-- Check that values of matched row are set to null.
SELECT * FROM FKTABLE ORDER BY ftest1, ftest2, ftest3;
 ftest1 | ftest2 | ftest3
--------+--------+--------
      1 |      3 |      5
      2 |      4 |      8
      3 |      6 |     12
        |        |      0
        |        |      4
(5 rows)

-- Delete another row from ITABLE
DELETE FROM ITABLE WHERE ptest1=5 and ptest2=10;
-- Check FKTABLE (should be no change)
SELECT * FROM FKTABLE ORDER BY ftest1, ftest2, ftest3;
 ftest1 | ftest2 | ftest3
--------+--------+--------
      1 |      3 |      5
      2 |      4 |      8
      3 |      6 |     12
        |        |      0
        |        |      4
(5 rows)

-- Update a row from ITABLE
UPDATE ITABLE SET ptest1=1 WHERE ptest1=2;
-- Check FKTABLE for update of matched row
SELECT * FROM FKTABLE ORDER BY ftest1, ftest2, ftest3;
 ftest1 | ftest2 | ftest3
--------+--------+--------
      1 |      3 |      5
      3 |      6 |     12
        |        |      0
        |        |      4
        |        |      8
(5 rows)

-- Test truncate
-- Should fail due to dependency on FKTABLE.
TRUNCATE ITABLE;
ERROR:  cannot truncate a table referenced in a foreign key constraint
DETAIL:  Table "fktable" references "itable".
HINT:  Truncate table "fktable" at the same time, or use TRUNCATE ... CASCADE.
-- Should truncate both ITABLE and FKTABLE.
TRUNCATE ITABLE CASCADE;
NOTICE:  truncate cascades to table "fktable"
-- Check that both tables are now empty.
SELECT * FROM ITABLE ORDER BY ptest1, ptest2;
 ptest1 | ptest2 | ptest3
--------+--------+--------
(0 rows)

SELECT * FROM FKTABLE ORDER BY ftest1, ftest2, ftest3;
 ftest1 | ftest2 | ftest3
--------+--------+--------
(0 rows)

DROP TABLE ITABLE CASCADE;
NOTICE:  drop cascades to constraint constrname on table fktable
DROP TABLE FKTABLE;
-- UPDATE with multiple foreign keys --
CREATE TABLE pk(k INT PRIMARY KEY, x INT UNIQUE, y INT UNIQUE);
CREATE TABLE fk_primary(k INT REFERENCES pk(k));
CREATE TABLE fk_unique_x(x INT REFERENCES pk(x));
CREATE TABLE fk_unique_y(y INT REFERENCES pk(y));
INSERT INTO pk VALUES(1, 10, 100);
UPDATE pk SET x = 11 WHERE x = 10;
UPDATE pk SET y = 101 WHERE y = 100;
INSERT INTO fk_unique_x VALUES(11);
INSERT INTO fk_unique_y VALUES(101);
UPDATE pk SET x = 12 WHERE x = 11;
ERROR:  update or delete on table "pk" violates foreign key constraint "fk_unique_x_x_fkey" on table "fk_unique_x"
DETAIL:  Key (x)=(11) is still referenced from table "fk_unique_x".
UPDATE pk SET y = 102 WHERE y = 101;
ERROR:  update or delete on table "pk" violates foreign key constraint "fk_unique_y_y_fkey" on table "fk_unique_y"
DETAIL:  Key (y)=(101) is still referenced from table "fk_unique_y".
DROP TABLE fk_unique_y;
DROP TABLE fk_unique_x;
DROP TABLE fk_primary;
DROP TABLE pk;
-- DEFERRABLE foreign key constraints
CREATE TABLE parent(k INT PRIMARY KEY);
CREATE TABLE child(k INT PRIMARY KEY, p_fk INT REFERENCES parent INITIALLY DEFERRED);
BEGIN;
INSERT INTO child VALUES (1, 1);
INSERT INTO child VALUES (2, 2);
COMMIT; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_p_fk_fkey"
DETAIL:  Key (p_fk)=(1) is not present in table "parent".
SELECT * FROM child ORDER BY k;
 k | p_fk
---+------
(0 rows)

BEGIN;
INSERT INTO child VALUES (1, 1);
INSERT INTO child VALUES (2, 1);
INSERT INTO child VALUES (3, 2), (4, 3), (5, 4);
INSERT INTO parent VALUES (1);
INSERT INTO parent VALUES (2), (3), (4);
COMMIT;
SELECT * FROM parent ORDER BY k;
 k
---
 1
 2
 3
 4
(4 rows)

SELECT * FROM child ORDER BY k;
 k | p_fk
---+------
 1 |    1
 2 |    1
 3 |    2
 4 |    3
 5 |    4
(5 rows)

DELETE FROM child;
DELETE FROM parent;
CREATE TABLE grand_child(k INT PRIMARY KEY, c_fk INT REFERENCES child INITIALLY DEFERRED);
BEGIN;
INSERT INTO grand_child VALUES (1, 1), (2, 2), (3, 3);
INSERT INTO child VALUES (2, 2), (3, 3);
INSERT INTO parent VALUES (1), (2);
COMMIT; -- should fail
ERROR:  insert or update on table "grand_child" violates foreign key constraint "grand_child_c_fk_fkey"
DETAIL:  Key (c_fk)=(1) is not present in table "child".
BEGIN;
INSERT INTO grand_child VALUES (1, 1), (2, 2), (3, 3);
INSERT INTO child VALUES (2, 2), (3, 3), (1, 1);
INSERT INTO parent VALUES (3), (2), (1);
COMMIT;
SELECT * FROM parent ORDER BY k;
 k
---
 1
 2
 3
(3 rows)

SELECT * FROM child ORDER BY k;
 k | p_fk
---+------
 1 |    1
 2 |    2
 3 |    3
(3 rows)

SELECT * FROM grand_child ORDER BY k;
 k | c_fk
---+------
 1 |    1
 2 |    2
 3 |    3
(3 rows)

BEGIN;
UPDATE grand_child SET c_fk = 4 WHERE k = 1;
INSERT INTO child VALUES (4, 4);
INSERT INTO parent VALUES (5);
COMMIT; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_p_fk_fkey"
DETAIL:  Key (p_fk)=(4) is not present in table "parent".
BEGIN;
UPDATE grand_child SET c_fk = 4 WHERE k = 1;
INSERT INTO child VALUES (4, 4);
INSERT INTO parent VALUES (4);
COMMIT;
SELECT * FROM parent ORDER BY k;
 k
---
 1
 2
 3
 4
(4 rows)

SELECT * FROM child ORDER BY k;
 k | p_fk
---+------
 1 |    1
 2 |    2
 3 |    3
 4 |    4
(4 rows)

SELECT * FROM grand_child ORDER BY k;
 k | c_fk
---+------
 1 |    4
 2 |    2
 3 |    3
(3 rows)

DROP TABLE grand_child;
DROP TABLE child;
DELETE FROM parent;
CREATE TABLE child(k INT PRIMARY KEY, p_fk INT REFERENCES parent INITIALLY DEFERRED);
CREATE TABLE grand_child(k INT PRIMARY KEY, c_fk INT REFERENCES child);
BEGIN;
INSERT INTO child VALUES (1, 1), (2, 2);
INSERT INTO grand_child VALUES (1, 1), (2, 2);
INSERT INTO parent VALUES (1);
COMMIT; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_p_fk_fkey"
DETAIL:  Key (p_fk)=(2) is not present in table "parent".
BEGIN;
INSERT INTO child VALUES (1, 1), (2, 2);
INSERT INTO grand_child VALUES (1, 1), (2, 2);
INSERT INTO parent VALUES (1);
INSERT INTO parent VALUES (2);
COMMIT;
SELECT * FROM parent ORDER BY k;
 k
---
 1
 2
(2 rows)

SELECT * FROM child ORDER BY k;
 k | p_fk
---+------
 1 |    1
 2 |    2
(2 rows)

SELECT * FROM grand_child ORDER BY k;
 k | c_fk
---+------
 1 |    1
 2 |    2
(2 rows)

DROP TABLE grand_child;
DROP TABLE child;
DROP TABLE parent;
CREATE TABLE mother(k INT PRIMARY KEY);
CREATE TABLE father(k INT PRIMARY KEY);
CREATE TABLE child(
    k INT PRIMARY KEY,
    m_fk INT REFERENCES mother INITIALLY DEFERRED,
    f_fk INT REFERENCES father INITIALLY DEFERRED);
BEGIN;
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);
INSERT INTO mother VALUES (1), (2);
INSERT INTO father VALUES (1), (2), (3);
COMMIT; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_m_fk_fkey"
DETAIL:  Key (m_fk)=(3) is not present in table "mother".
BEGIN;
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2);
INSERT INTO mother VALUES (1), (2);
INSERT INTO father VALUES (3), (2), (1);
COMMIT;
SELECT * FROM child ORDER BY k;
 k | m_fk | f_fk
---+------+------
 1 |    1 |    1
 2 |    2 |    2
(2 rows)

SELECT * FROM mother ORDER by k;
 k
---
 1
 2
(2 rows)

SELECT * FROM father ORDER BY k;
 k
---
 1
 2
 3
(3 rows)

BEGIN;
UPDATE child SET m_fk = 4, f_fk = 4 WHERE k = 1;
INSERT INTO mother VALUES (5), (4);
INSERT INTO father VALUES (4), (5);
COMMIT;
SELECT * FROM child ORDER BY k;
 k | m_fk | f_fk
---+------+------
 1 |    4 |    4
 2 |    2 |    2
(2 rows)

SELECT * FROM mother ORDER by k;
 k
---
 1
 2
 4
 5
(4 rows)

SELECT * FROM father ORDER BY k;
 k
---
 1
 2
 3
 4
 5
(5 rows)

DROP TABLE child;
DELETE FROM mother;
DELETE FROM father;
CREATE TABLE child(
    k INT PRIMARY KEY,
    m_fk INT REFERENCES mother,
    f_fk INT REFERENCES father INITIALLY DEFERRED);
BEGIN;
INSERT INTO mother VALUES (1), (2);
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3); -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_m_fk_fkey"
DETAIL:  Key (m_fk)=(3) is not present in table "mother".
COMMIT;
BEGIN;
INSERT INTO mother VALUES (1), (2);
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2);
INSERT INTO father VALUES (1);
COMMIT; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_f_fk_fkey"
DETAIL:  Key (f_fk)=(2) is not present in table "father".
BEGIN;
INSERT INTO mother VALUES (1), (2);
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2);
INSERT INTO father VALUES (3), (2), (1);
COMMIT;
SELECT * FROM child ORDER BY k;
 k | m_fk | f_fk
---+------+------
 1 |    1 |    1
 2 |    2 |    2
(2 rows)

SELECT * FROM mother ORDER by k;
 k
---
 1
 2
(2 rows)

SELECT * FROM father ORDER BY k;
 k
---
 1
 2
 3
(3 rows)

DROP TABLE child;
DELETE FROM mother;
DELETE FROM father;
CREATE TABLE child(
    k INT PRIMARY KEY,
    m_fk INT REFERENCES mother INITIALLY DEFERRED,
    f_fk INT REFERENCES father);
BEGIN;
INSERT INTO father VALUES (1), (2);
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3); -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_f_fk_fkey"
DETAIL:  Key (f_fk)=(3) is not present in table "father".
COMMIT;
BEGIN;
INSERT INTO father VALUES (1), (2);
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2);
INSERT INTO mother VALUES (1);
COMMIT; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_m_fk_fkey"
DETAIL:  Key (m_fk)=(2) is not present in table "mother".
BEGIN;
INSERT INTO father VALUES (1), (2);
INSERT INTO child VALUES (1, 1, 1), (2, 2, 2);
INSERT INTO mother VALUES (3), (2), (1);
COMMIT;
SELECT * FROM child ORDER BY k;
 k | m_fk | f_fk
---+------+------
 1 |    1 |    1
 2 |    2 |    2
(2 rows)

SELECT * FROM mother ORDER by k;
 k
---
 1
 2
 3
(3 rows)

SELECT * FROM father ORDER BY k;
 k
---
 1
 2
(2 rows)

BEGIN;
UPDATE child SET f_fk = 4 WHERE k = 1; -- should fail
ERROR:  insert or update on table "child" violates foreign key constraint "child_f_fk_fkey"
DETAIL:  Key (f_fk)=(4) is not present in table "father".
COMMIT;
BEGIN;
UPDATE child SET m_fk = 4 WHERE k = 1;
INSERT INTO mother VALUES (4);
COMMIT;
SELECT * FROM child ORDER BY k;
 k | m_fk | f_fk
---+------+------
 1 |    4 |    1
 2 |    2 |    2
(2 rows)

SELECT * FROM mother ORDER by k;
 k
---
 1
 2
 3
 4
(4 rows)

DROP TABLE child;
DROP TABLE mother;
DROP TABLE father;
CREATE TABLE p1(k INT PRIMARY KEY);
CREATE TABLE p2(k INT PRIMARY KEY);
CREATE TABLE p3(k INT PRIMARY KEY);
CREATE TABLE p4(k INT PRIMARY KEY);
CREATE TABLE c(
    k INT PRIMARY KEY,
    p1_fk INT REFERENCES p1 INITIALLY DEFERRED,
    p2_fk INT REFERENCES p2,
    p3_fk INT REFERENCES p3 INITIALLY DEFERRED,
    p4_fk INT REFERENCES p4);
BEGIN;
INSERT INTO p2 VALUES (1), (2);
INSERT INTO c VALUES (1, 1, 1, 1, 1); -- should fail
ERROR:  insert or update on table "c" violates foreign key constraint "c_p4_fk_fkey"
DETAIL:  Key (p4_fk)=(1) is not present in table "p4".
COMMIT;
BEGIN;
INSERT INTO p2 VALUES (1), (2);
INSERT INTO p4 VALUES (1);
INSERT INTO c VALUES (1, 1, 1, 1, 1);
INSERT INTO p3 VALUES (1);
COMMIT;  -- should fail
ERROR:  insert or update on table "c" violates foreign key constraint "c_p1_fk_fkey"
DETAIL:  Key (p1_fk)=(1) is not present in table "p1".
BEGIN;
INSERT INTO p2 VALUES (1), (2);
INSERT INTO p4 VALUES (1), (2);
INSERT INTO c VALUES (1, 1, 1, 1, 1), (2, 2, 2, 2, 2);
INSERT INTO p3 VALUES (2), (1);
INSERT INTO p1 VALUES (3), (2), (1);
COMMIT;
SELECT * FROM p1 ORDER BY k;
 k
---
 1
 2
 3
(3 rows)

SELECT * FROM p2 ORDER BY k;
 k
---
 1
 2
(2 rows)

SELECT * FROM p3 ORDER BY k;
 k
---
 1
 2
(2 rows)

SELECT * FROM p4 ORDER BY k;
 k
---
 1
 2
(2 rows)

SELECT * FROM c ORDER BY k;
 k | p1_fk | p2_fk | p3_fk | p4_fk
---+-------+-------+-------+-------
 1 |     1 |     1 |     1 |     1
 2 |     2 |     2 |     2 |     2
(2 rows)
