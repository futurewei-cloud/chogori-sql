--------------------------------------
-- Set up tables.
--------------------------------------
CREATE TABLE t1(h int, r int, v1 int, v2 int, v3 int, primary key(h HASH, r ASC));
CREATE INDEX t1_v1_v2_idx on t1(v1 HASH, v2 ASC);
CREATE UNIQUE INDEX t1_v3_uniq_idx on t1(v3 HASH);
CREATE TABLE t2(h int, r int, v1 int, v2 int, v3 int, primary key(h HASH, r ASC));
CREATE INDEX t2_v1_v2_idx on t2(v1 HASH, v2 ASC);
CREATE UNIQUE INDEX t2_v3_uniq_idx on t2(v3 HASH);
CREATE TABLE t3(h int, r int, v1 int, v2 int, v3 int, primary key(h ASC, r ASC));
CREATE INDEX t3_v1_v2_idx on t3(v1 ASC, v2 ASC);
CREATE UNIQUE INDEX t3_v3_uniq_idx on t3(v3 ASC);
-- Should make use of eq transitivity and use pkey on both tables.
EXPLAIN SELECT *
FROM t1
     JOIN t2 on t1.h = t2.h and t1.r = t2.r
WHERE t1.h = 2 and t2.r = 3;
                               QUERY PLAN
-------------------------------------------------------------------------
 Nested Loop  (cost=0.00..8.24 rows=1 width=40)
   ->  Index Scan using t1_pkey on t1  (cost=0.00..4.12 rows=1 width=20)
         Index Cond: ((h = 2) AND (r = 3))
   ->  Index Scan using t2_pkey on t2  (cost=0.00..4.12 rows=1 width=20)
         Index Cond: ((h = 2) AND (r = 3))
(5 rows)

-- Should make use of eq transitivity and use full pkey on t2 and partial pkey on t1.
EXPLAIN SELECT *
FROM t1
     JOIN t2 on t1.h = t2.h
WHERE t1.h = 2 and t2.r = 3;
                                 QUERY PLAN
----------------------------------------------------------------------------
 Nested Loop  (cost=0.00..20.37 rows=100 width=40)
   ->  Index Scan using t2_pkey on t2  (cost=0.00..4.12 rows=1 width=20)
         Index Cond: ((h = 2) AND (r = 3))
   ->  Index Scan using t1_pkey on t1  (cost=0.00..15.25 rows=100 width=20)
         Index Cond: (h = 2)
(5 rows)

-- Should use pkey index on t1 (a) and t2_v1_v2_idx (due to join condition).
EXPLAIN SELECT *
FROM t1 as a
     JOIN t1 as b on a.h = b.v1
WHERE a.h = 2 and a.r = 3;
                                    QUERY PLAN
-----------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..21.37 rows=100 width=40)
   ->  Index Scan using t1_pkey on t1 a  (cost=0.00..4.12 rows=1 width=20)
         Index Cond: ((h = 2) AND (r = 3))
   ->  Index Scan using t1_v1_v2_idx on t1 b  (cost=0.00..16.25 rows=100 width=20)
         Index Cond: (v1 = 2)
(5 rows)

-- Should make use of eq transitivity and use pkey on all 3 tables (then sort 1 row in memory).
EXPLAIN SELECT *
FROM t1
     JOIN t2 on t1.h = t2.h and t1.r = t2.r
     JOIN t3 on t2.h = t3.h and t1.r = t3.r
WHERE t1.h = 1 and t3.r = 2
ORDER BY t3.v3 DESC;
                                     QUERY PLAN
-------------------------------------------------------------------------------------
 Sort  (cost=12.38..12.38 rows=1 width=64)
   Sort Key: t3.v3 DESC
   ->  Nested Loop  (cost=0.00..12.37 rows=1 width=64)
         ->  Nested Loop  (cost=0.00..8.24 rows=1 width=40)
               ->  Index Scan using t1_pkey on t1  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: ((h = 1) AND (r = 2))
               ->  Index Scan using t2_pkey on t2  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: ((h = 1) AND (r = 2))
         ->  Index Scan using t3_pkey on t3  (cost=0.00..4.12 rows=1 width=20)
               Index Cond: ((h = 1) AND (r = 2))
(10 rows)

-- Should use v3_uniq_idx on t3 and t2 and v1_v2_idx (on partial key) for t1.
EXPLAIN SELECT *
FROM t1
     JOIN t2 on t1.v1 = t2.v1
     JOIN t3 on t2.v3 = t3.v3
WHERE t1.h = 1 and t3.v3 = 2
ORDER BY t3.v3 ASC;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..21.76 rows=1 width=64)
   ->  Nested Loop  (cost=0.00..17.63 rows=1 width=40)
         ->  Index Scan using t2_v3_uniq_idx on t2  (cost=0.00..4.12 rows=1 width=20)
               Index Cond: (v3 = 2)
         ->  Index Scan using t1_v1_v2_idx on t1  (cost=0.00..12.50 rows=100 width=20)
               Index Cond: (v1 = t2.v1)
               Filter: (h = 1)
   ->  Index Scan using t3_v3_uniq_idx on t3  (cost=0.00..4.12 rows=1 width=20)
         Index Cond: (v3 = 2)
(9 rows)

-- Should still use same indexes as above, only t3.v1 > 5 condition for filtering.
EXPLAIN SELECT *
FROM t1
     JOIN t2 on t1.v1 = t2.v1
     JOIN t3 on t2.v3 = t3.v3
WHERE t1.h = 1 and t3.v3 = 2 and t3.v1 > 5
ORDER BY t3.v3 ASC;
                                      QUERY PLAN
---------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..21.76 rows=1 width=64)
   ->  Nested Loop  (cost=0.00..17.63 rows=1 width=40)
         ->  Index Scan using t2_v3_uniq_idx on t2  (cost=0.00..4.12 rows=1 width=20)
               Index Cond: (v3 = 2)
         ->  Index Scan using t1_v1_v2_idx on t1  (cost=0.00..12.50 rows=100 width=20)
               Index Cond: (v1 = t2.v1)
               Filter: (h = 1)
   ->  Index Scan using t3_v3_uniq_idx on t3  (cost=0.00..4.13 rows=1 width=20)
         Index Cond: (v3 = 2)
         Filter: (v1 > 5)
(10 rows)

-- Should use pkey on t1, then v3_uniq_idx on t2 and v1_v2_idx on t3.
EXPLAIN SELECT *
FROM t1
     FULL JOIN t2 on t1.v3 = t2.v3
     FULL JOIN t3 on t1.v1 = t3.v1 and t3.v1 = t1.v1
WHERE t1.h = 1 and t1.r = 2
ORDER BY t3.v3 DESC;
                                         QUERY PLAN
--------------------------------------------------------------------------------------------
 Sort  (cost=25.25..25.26 rows=1 width=64)
   Sort Key: t3.v3 DESC
   ->  Nested Loop Left Join  (cost=0.00..25.24 rows=1 width=64)
         ->  Nested Loop Left Join  (cost=0.00..8.24 rows=1 width=40)
               ->  Index Scan using t1_pkey on t1  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: ((h = 1) AND (r = 2))
               ->  Index Scan using t2_v3_uniq_idx on t2  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: (t1.v3 = v3)
         ->  Index Scan using t3_v1_v2_idx on t3  (cost=0.00..16.00 rows=100 width=20)
               Index Cond: ((t1.v1 = v1) AND (v1 = t1.v1))
(10 rows)

-- Should still use same indexes as above, only use t2.r IN condition for filtering.
EXPLAIN SELECT *
FROM t1
     FULL JOIN t2 on t1.v3 = t2.v3
     FULL JOIN t3 on t1.v1 = t3.v1 and t3.v1 = t1.v1
WHERE t1.h = 1 and t1.r = 2 and t2.r IN (3,4,5)
ORDER BY t3.v3 DESC;
                                         QUERY PLAN
--------------------------------------------------------------------------------------------
 Sort  (cost=25.26..25.27 rows=1 width=64)
   Sort Key: t3.v3 DESC
   ->  Nested Loop Left Join  (cost=0.00..25.25 rows=1 width=64)
         ->  Nested Loop  (cost=0.00..8.25 rows=1 width=40)
               ->  Index Scan using t1_pkey on t1  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: ((h = 1) AND (r = 2))
               ->  Index Scan using t2_v3_uniq_idx on t2  (cost=0.00..4.13 rows=1 width=20)
                     Index Cond: (v3 = t1.v3)
                     Filter: (r = ANY ('{3,4,5}'::integer[]))
         ->  Index Scan using t3_v1_v2_idx on t3  (cost=0.00..16.00 rows=100 width=20)
               Index Cond: ((t1.v1 = v1) AND (v1 = t1.v1))
(11 rows)

-- Should still use same indexes as above, but use the IN condition on v2 for t3.v1_v2_idx.
EXPLAIN SELECT *
FROM t1
     FULL JOIN t2 on t1.v3 = t2.v3
     FULL JOIN t3 on t1.v1 = t3.v1 and t3.v1 = t1.v1
WHERE t1.h = 1 and t1.r = 2 and t3.v2 IN (3,4,5)
ORDER BY t3.v3 DESC;
                                         QUERY PLAN
--------------------------------------------------------------------------------------------
 Sort  (cost=13.59..13.60 rows=1 width=64)
   Sort Key: t3.v3 DESC
   ->  Nested Loop  (cost=0.00..13.58 rows=1 width=64)
         ->  Nested Loop Left Join  (cost=0.00..8.24 rows=1 width=40)
               ->  Index Scan using t1_pkey on t1  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: ((h = 1) AND (r = 2))
               ->  Index Scan using t2_v3_uniq_idx on t2  (cost=0.00..4.12 rows=1 width=20)
                     Index Cond: (t1.v3 = v3)
         ->  Index Scan using t3_v1_v2_idx on t3  (cost=0.00..5.24 rows=10 width=20)
               Index Cond: ((v1 = t1.v1) AND (v2 = ANY ('{3,4,5}'::integer[])))
(10 rows)
