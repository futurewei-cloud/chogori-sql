--
-- CREATE SEQUENCE
--
--- test creation of SERIAL column
CREATE TABLE serialTest1 (f1 text, f2 serial);
SELECT * FROM serialTest1_f2_seq;
 last_value | log_cnt | is_called
------------+---------+-----------
          1 |       0 | f
(1 row)

INSERT INTO serialTest1 VALUES ('foo');
INSERT INTO serialTest1 VALUES ('bar');
INSERT INTO serialTest1 VALUES ('force', 100);
INSERT INTO serialTest1 VALUES ('wrong', NULL);
ERROR:  null value in column "f2" violates not-null constraint
DETAIL:  Failing row contains (wrong, null).
SELECT * FROM serialTest1 ORDER BY f1;
  f1   | f2
-------+-----
 bar   |   2
 foo   |   1
 force | 100
(3 rows)

SELECT * FROM serialTest1_f2_seq;
 last_value | log_cnt | is_called
------------+---------+-----------
          2 |       0 | t
(1 row)

SELECT pg_get_serial_sequence('serialTest1', 'f2');
  pg_get_serial_sequence
---------------------------
 public.serialtest1_f2_seq
(1 row)

-- similar to above but on TEMPORARY TABLE
CREATE TEMPORARY TABLE serialTest2 (id serial, val int);
INSERT INTO serialTest2 (val) VALUES (95);
INSERT INTO serialTest2 (val) VALUES (-3);
INSERT INTO serialTest2 (val) VALUES (18);
INSERT INTO serialTest2 (id, val) VALUES (1, 19);
SELECT * FROM serialTest2;
 id | val
----+-----
  1 |  95
  2 |  -3
  3 |  18
  1 |  19
(4 rows)

SELECT * FROM serialTest2_id_seq;
 last_value | log_cnt | is_called
------------+---------+-----------
          3 |       0 | t
(1 row)

SELECT setval('serialTest2_id_seq', 99, true);
 setval
--------
     99
(1 row)

INSERT INTO serialTest2 (val) VALUES (40);
INSERT INTO serialTest2 (val) VALUES (41);
INSERT INTO serialTest2 (val) VALUES (42);
SELECT * FROM serialTest2;
 id  | val
-----+-----
   1 |  95
   2 |  -3
   3 |  18
   1 |  19
 100 |  40
 101 |  41
 102 |  42
(7 rows)

DROP TABLE serialTest2;
-- operations directly on sequences
CREATE SEQUENCE sequence_test1;
SELECT * from sequence_test1;
 last_value | log_cnt | is_called
------------+---------+-----------
          1 |       0 | f
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
       1
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
       2
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
       3
(1 row)

SELECT last_value FROM sequence_test1;
 last_value
------------
          3
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
       4
(1 row)

SELECT lastval();
 lastval
---------
       4
(1 row)

SELECT setval('sequence_test1', 50);
 setval
--------
     50
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
      51
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
      52
(1 row)

SELECT setval('sequence_test1', 50, false);
 setval
--------
     50
(1 row)

SELECT nextval('sequence_test1');
 nextval
---------
      50
(1 row)

-- similar to above but on TEMPORARY SEQUENCE
CREATE TEMPORARY SEQUENCE sequence_test2;
SELECT nextval('sequence_test2');
 nextval
---------
       1
(1 row)

SELECT nextval('sequence_test2');
 nextval
---------
       2
(1 row)

SELECT nextval('sequence_test2');
 nextval
---------
       3
(1 row)

SELECT nextval('sequence_test2');
 nextval
---------
       4
(1 row)

SELECT * FROM sequence_test2;
 last_value | log_cnt | is_called
------------+---------+-----------
          4 |       0 | t
(1 row)

DROP SEQUENCE sequence_test2;
-- Information schema
SELECT * FROM information_schema.sequences
  WHERE sequence_name ~ ANY(ARRAY['sequence_test', 'serialtest'])
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema |   sequence_name    | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option
------------------+-----------------+--------------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 yugabyte         | public          | sequence_test1     | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 yugabyte         | public          | serialtest1_f2_seq | integer   |                32 |                       2 |             0 | 1           | 1             | 2147483647          | 1         | NO
(2 rows)

SELECT schemaname, sequencename, start_value, min_value, max_value, increment_by, cycle, cache_size, last_value
FROM pg_sequences
WHERE sequencename ~ ANY(ARRAY['sequence_test', 'serialtest'])
  ORDER BY sequencename ASC;
 schemaname |    sequencename    | start_value | min_value |      max_value      | increment_by | cycle | cache_size | last_value
------------+--------------------+-------------+-----------+---------------------+--------------+-------+------------+------------
 public     | sequence_test1     |           1 |         1 | 9223372036854775807 |            1 | f     |          1 |
 public     | serialtest1_f2_seq |           1 |         1 |          2147483647 |            1 | f     |          1 |
(2 rows)
